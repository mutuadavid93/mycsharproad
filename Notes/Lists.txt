### Lists, They are declared using the list keyword and type

	A list can be used to create a collection of any type.

	i.e List<int> list = new List<int>(); 

	You can as well overload a List constructor
		to specify the "SIZE" during declaration.

	i.e List<int> list = new List<int>(2);

NB: Lists grow in size automatically.

	We access objects in an array using indexes. Customer c = customers[0];

NB: Always use a foreach when dealing with Collections. You can as well only add 
	objects that inherit from the parent class as well.

NB: Insert(index, object) adds an object to that index whereas Add pushes at the 
	end of the List.

NB: To get the position of a given object, we use listInstance.IndexOf(object, startIndex);

	Overloaded version: listInstance.IndexOf(object, startIndex, Count);


### Methods in a List:
	
	# Contains() => check if an item exists in a List, returns a Boolean.
			i.e listInstance.Contains(object);
		
		You can as well use;
			i.e listInstance.Exists(emp => emp.Name.StartsWith("P"));

	# Find() => Searches for an elem that matches the conditions defined by the specified
			lambda expression and returns "ONLY the first matching" item from the List.

			Returns an Object. 

	# FindLast() => Searches and returns only the last object matching the 
		conditions in a lambda expression.

	# FindAll() => Returns All the items matching the Lambda expression. 
		Returns a List<> type.

	# FindIndex() => Returns an Index of the First Matching element in the list
		returns an int.
			i.e 
		* FindIndex(cust => cust.Salary > 5000);
		* Overload to include startIndex
		* Overload to include Count.

	# FindLastIndex() => Returns the index of the LAST matching element from
		 the List.



### Convert an Array to List:
	Use ToList(); it returns a List back.

	i.e List<Employee> emplist = empArray.ToList();

	Then Loop through using a foreach loop.

### Convert the List to an Array:
	Employee[] empArray = listEmp.ToArray();


### Convert a List to a Dictionary:
	Dictionary<int, Customer> dict = listCustomer.ToDictionary(x => x.ID);

	then loop; foreach(KeyValuePair<int, Customer> kvp in dict){ }



### Using Ranges in Lists:
	
	# AddRange() => Allows addition of a List of items to the end of the
		 list.

		i.e listOneInstance.AddRange(listTwoInstance);
	

	# GetRange() => Retrieve more than one item from the list. Then loop using
		foreach.

		i.e List<Customer> customers = listCustomers.GetRange(startIndex, Count);

	# InsertRange() => Insert a List of items to the front of the List.

		i.e listOneInstance.InsertRange(startIndex, listTwoInstance);

	# RemoveAt() => Remove an item from a specified position.

		    i.e listCustomers.RemoveAt(index);
			OR
			listCustomers.RemoveAt(FindLastIndex(cust => cust.Salary > 5000));

	# RemoveAll() => Remove all Items matching a Lambda's Condition.

	# RemoveRange() => Remove more than one item from the List.
		listCustomers.RemoveRange(startIndex, Count);


### Sorting a List of Simple Types:
	e.g int, string, char, float e.t.c

	# Default Ascending order;
		simpleListInstance.Sort();

	# Descending order;
		simpleListInstance.Reverse();

NB: .NET uses IComparable interface to sort Simple Types because they inherit
 that interface.
	

### Sorting a List Complex Types:
	Our class has to extend IComparable interface. Which has CompareTo()
		method is has to be implemented.

	NB: If you are trying to sort based on a property, just use
		one line i.e

		return this.Salary.CompareTo(other.Salary); 	

### Sorting when you don't own the class:
	Just Implement IComparer Interface's Compare() method, then 
		Instantiate that class and pass that instance in the Sort() method.

 	Syntax: public int Compare(Object x, Object y) 

	then; return x.fullName.CompareTo(y.fullName);

### Sorting a List of complex types using delegate:

	A delegate points to a function, when you invoke that delegate, it 
		then invokes the function as well.

	Steps:
		* Create a function
			i.e private static int CompareEmployee(Employee x, Employee y)
        			{
          			  return x.ID.CompareTo(y.ID);
      				}

		* Create an Instance of the delegate
			i.e Comparison<Employee> empDelegate = new Comparison<Employee>(CompareEmployee);
	
		* Pass the delegate instance into the Sort()
			i.e employeeList.Sort(empDelegate);

	You are done!

### Alternatively, you can use this one line:
	i.e
	employeeList.Sort(delegate(Employee empA, Employee empB) { return empA.ID.CompareTo(empB.ID); });

### Choice Three:
	Use lambda Expressions;
	i.e employeeList.Sort((x, y) => x.ID.CompareTo(y.ID));


### Other Methods in Lists
	
	# TrueForAll() => Returns a Boolean if the all the items in the list 
		match the predicate.

	# AsReadOnly() => You can only Read but never Add / Remove items from 
		a list which uses this method.
	
		NB: it belongs to System.Collections.ObjectModel Namespace.

		NB: But you can Retrieve an Item using Index.
	
	# TrimExcess() => Sets the capacity to the actual number of elements 
		actually present in the list.

		NB: The TrimExcess() has a Threshold of 90%. i.e There is no 
			need to use the method when the list contains alamost
			90% content.









